cmake_minimum_required(VERSION 3.19)

project(error LANGUAGES CXX)

# Check if this is the top-level CMake project or was included as a sub-project.
if(PROJECT_NAME STREQUAL CMAKE_PROJECT_NAME)
    set(CAESAR_MAIN_PROJECT ON)
else()
    set(CAESAR_MAIN_PROJECT OFF)
endif()

# Project configuration options.
option(CAESAR_TEST "Enable test suite" ${CAESAR_MAIN_PROJECT})
option(CAESAR_WERROR "Treat compiler warnings as errors" ON)

# Import third-party dependencies.
find_package(doctest REQUIRED CONFIG)
find_package(fmt REQUIRED CONFIG)

# Enable compiler diagnostic flags.
set(warnings
    -Wall
    -Walloc-zero
    -Wcast-align
    -Wcast-qual
    -Wconversion
    -Wcuda-compat
    -Wdeprecated
    -Wdouble-promotion
    -Wduplicated-branches
    -Wduplicated-cond
    -Wextra
    -Wformat=2
    -Wimplicit-fallthrough
    -Winconsistent-missing-destructor-override
    -Wlogical-op
    -Wloop-analysis
    -Wmisleading-indentation
    -Wmissing-noreturn
    -Wnon-virtual-dtor
    -Wnull-dereference
    -Wold-style-cast
    -Woverloaded-virtual
    -Wpacked
    -Wpedantic
    -Wredundant-parens
    -Wshadow
    -Wsign-conversion
    -Wstrict-aliasing
    -Wstrict-overflow
    -Wtautological-compare
    -Wthread-safety
    -Wundef
    -Wundefined-func-template
    -Wundefined-reinterpret-cast
    -Wuninitialized
    -Wunknown-pragmas
    -Wunneeded-internal-declaration
    -Wunreachable-code-aggressive
    -Wunused
    -Wunused-member-function
    -Wvector-conversion
    -Wvla
    -Wweak-template-vtables
    -Wweak-vtables
    -Wzero-as-null-pointer-constant
    )
if(CAESAR_WERROR)
    list(APPEND warnings -Werror)
endif()

include(CheckCompilerFlag)
foreach(warning ${warnings})
    check_compiler_flag(CXX ${warning} cxx_${warning}_supported)
    if(cxx_${warning}_supported)
        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${warning}>)
    endif()
endforeach()

add_library(error SHARED)
add_library(caesar::error ALIAS error)

# Require C++17.
target_compile_features(error PUBLIC cxx_std_17)

# Add sources.
set(sources
    caesar/error/error.cpp
    #caesar/error/expected.cpp
    )
target_sources(error PRIVATE ${sources})

# Add include dirs.
target_include_directories(
    error
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>
    )

# Link to imported targets.
target_link_libraries(
    error
    PRIVATE
        fmt::fmt
    )